#1.Swapping the first and last elements in List
def swapList(newList):
    
    newList[0], newList[-1] = newList[-1], newList[0]

    return newList

newList = [12, 35, 9, 56, 24]
print(swapList(newList))


#2.Swapping elements at given position  in list
def swapPositions(list, pos1, pos2):
	
	list[pos1], list[pos2] = list[pos2], list[pos1]
	return list

# Driver function
List = [23, 65, 19, 90]
pos1, pos2 = 1, 3

print(swapPositions(List, pos1-1, pos2-1))

#3.adding elements in list
my_list = ['a','b','c']
new_elements = [4, 5]
my_list += new_elements 
print(my_list)



#4.find the string in list
l = [1, 2.0, 'nature', 'is', 'magic', 'thing']

s = 'nature' 
 
if s in l:
    print(f'{s} is present in the list')
else:
    print(f'{s} is not present in the list')

#5.Python program to remove multiple elements from a list 

list1 = [11, 5, 17, 18, 23, 50] 
list1 = [ elem for elem in list1 if elem % 2 != 0]
print(*list1)

#6.reversing the list
lst = [10, 11, 12, 13, 14, 15]
lst.reverse()
print("Using reverse() ", lst)
print("Using reversed() ", list(reversed(lst)))

#7add elements in tuple
def sum1(test_tup):
	test = list(test_tup)
	count = 0
	for i in test:
		count += i
	return count
test_tup = (5, 20, 3, 7, 6, 8)
print(sum1(test_tup))

#8.sorting in dictionary
myDict = {'ravi': 10, 'rajnish': 9,
        'sanjeev': 15, 'yash': 2, 'suraj': 32}

myKeys = list(myDict.keys())
myKeys.sort()
sorted_dict = {i: myDict[i] for i in myKeys}

print(sorted_dict)

#9.Python code to get the maximum element from a set
def MAX(sets):
	return (max(sets))
sets = set([8, 16, 24, 1, 25, 3, 10, 65, 55])
print(MAX(sets))


#10.Python code to get the minimum element from a set
def MIN(sets):
	return (min(sets))
sets = set([4, 12, 10, 9, 4, 13])
print(MIN(sets))

#11.Assigning Subsequent Rows to Matrix first row elements Using dictionary comprehension
test_list = [[5, 8, 9], [2, 0, 9], [5, 4, 2], [2, 3, 9]]
print("The original list : " + str(test_list))
res = {test_list[0][ele] : test_list[ele + 1] for ele in range(len(test_list) - 1)}
print("The Assigned Matrix : " + str(res))

#12.Lambda function with if-else
square = lambda x : x*x if(x > 0) else None
print(square(4))

#13.No.of arguments in function
def no_of_argu(*args):
    return(len(args))

print(no_of_argu(2, 5, 4))
print(no_of_argu(4, 5, 6, 5, 4, 4))
print(no_of_argu(3, 2, 32, 4, 4, 52, 1))
print(no_of_argu(1))


# 14.Function to print the half diamond star pattern 
def halfDiamondStar(N): 

	for i in range(N): 

		for j in range(0, i + 1): 
			print("*", end = "") 
		print() 
	for i in range(1, N): 

		for j in range(i, N): 
			print("*", end = "") 
		print() 
N = 5; 

# 15.Function to print Diamond shape
def Diamond(rows):
    n = 1
    for i in range(1, rows + 1):
        for j in range (1, (rows - i) + 1):
            print(end = " ")
        while n != (i+1):
            print("*", end = " ")
            n = n + 1
        n = 1
        print()

    k = 0
    n = 0
    for i in range(1, rows + 1):
        for j in range (1, k + 1):
            print(end = " ")
        k = k + 1
        while n <= (rows - i):
            print("*", end = " ")
            n = n + 1
        n = 0
        print()
rows = 5
Diamond(rows)
halfDiamondStar(N); 


# Function to print full pyramid pattern
def full_pyramid(n):
    for i in range(1, n + 1):
        # Print leading spaces
        for j in range(n - i):
            print(" ", end="")
        for k in range(1, 2*i):
            print("*", end="")
        print()
   
full_pyramid(5)

